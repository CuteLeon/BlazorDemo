@* 使用两个路由，分别匹配创建和编辑的功能 *@
@page "/PublishCounter"
@page "/PublishCounter/{Area}"

<h3>PublishCounter</h3>

@* 判断表单是否提交并显示提交结果 *@
@if (Result.Status.HasValue)
{
    <div class="alert alert-@(Result.Status.Value?"success":"danger")">
        @Result.Message
    </div>
}
else
{
    @* 向表单绑定数据实例、验证方法 *@
    <EditForm Model="@AreaCounterEntity" OnValidSubmit="OnValidSubmit" OnInvalidSubmit="OnInvalidSubmit">
        @* 数据验证器和验证消息组件 *@
        <DataAnnotationsValidator />
        <ValidationSummary />

        @* 标签和表单控件组合 *@
        <div class="form-group row">
            <label for="@nameof(AreaCounterEntity.Area)" class="col-sm-2 col-form-label">@nameof(AreaCounterEntity.Area)</label>
            <div class="col-sm-10">
                <InputText class="form-control" @bind-Value="AreaCounterEntity.Area" />
                @* 显示针对属性的验证信息 *@
                <ValidationMessage For="()=>AreaCounterEntity.Area" />
            </div>
        </div>

        <div class="form-group row">
            <label for="@nameof(AreaCounterEntity.Count)" class="col-sm-2 col-form-label">@nameof(AreaCounterEntity.Count)</label>
            <div class="col-sm-10">
                <InputNumber class="form-control" @bind-Value="AreaCounterEntity.Count" />
            </div>
        </div>

        <div class="form-group row">
            <label for="@nameof(AreaCounterEntity.PublishDate)" class="col-sm-2 col-form-label">@nameof(AreaCounterEntity.PublishDate)</label>
            <div class="col-sm-10">
                <InputDate class="form-control" @bind-Value="AreaCounterEntity.PublishDate" />
            </div>
        </div>

        <div class="form-group row">
            <label for="@nameof(AreaCounterEntity.DataSource)" class="col-sm-2 col-form-label">@nameof(AreaCounterEntity.DataSource)</label>
            <div class="col-sm-10">
                <InputSelect TValue="DataSources" class="form-control" @bind-Value="AreaCounterEntity.DataSource">
                    @* 使用循环使用枚举项为下拉框填充项 **@
                    @foreach (var item in Enum.GetValues(typeof(DataSources)))
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
            </div>
        </div>

        <div class="form-group row">
            <label for="@nameof(AreaCounterEntity.Hide)" class="col-sm-2 col-form-label">@nameof(AreaCounterEntity.Hide)</label>
            <div class="col-sm-10">
                <InputCheckbox class="form-control" @bind-Value="AreaCounterEntity.Hide" />
            </div>
        </div>

        <div class="form-group row">
            <label for="@nameof(AreaCounterEntity.Remark)" class="col-sm-2 col-form-label">@nameof(AreaCounterEntity.Remark)</label>
            <div class="col-sm-10">
                <InputTextArea class="form-control" @bind-Value="AreaCounterEntity.Remark" />
            </div>
        </div>

        <hr />
        @* 提交事件按钮 *@
        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>
}

@code {
    /// <summary>
    /// 表单绑定的对象不可以为空引用
    /// </summary>
    public AreaCounter AreaCounterEntity { get; set; } = new AreaCounter() { Area = "C_" };

    /// <summary>
    /// 接收路由参数
    /// </summary>
    [Parameter]
    public string Area { get; set; }

    [Inject]
    public ICovidCounterService CovidCounterService { get; set; }

    [Inject]
    public ILogger<PublishCounter> Logger { get; set; }

    /// <summary>
    /// 记录提交状态和结果
    /// </summary>
    private (bool? Status, string Message) Result = (null, string.Empty);

    private async Task OnValidSubmit()
    {
        Logger.LogInformation($"{nameof(OnValidSubmit)}: {AreaCounterEntity.Area}=>{AreaCounterEntity.Count}");
        try
        {
            var result = await CovidCounterService.PublishCounterAsync(this.AreaCounterEntity);
            this.Result.Status = result;
            this.Result.Message = "发布成功！";
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, $"{nameof(OnValidSubmit)}: {AreaCounterEntity.Area}=>{AreaCounterEntity.Count}");
            this.Result.Status = false;
            this.Result.Message = $"发布失败！\n{ex.Message}";
        }
    }

    private async Task OnInvalidSubmit()
    {
        Result.Status = false;
        Result.Message = "表单验证失败！";
    }

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation($"{nameof(OnInitializedAsync)}: {nameof(Area)}=>{Area}");
        try
        {
            // 存在路由参数时，读取已有数据，从创建状态进入编辑状态
            if (!string.IsNullOrEmpty(Area))
            {
                AreaCounterEntity = await CovidCounterService.GetAreaCounterAsync(Area);
            }
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, $"{nameof(OnInitializedAsync)}: {nameof(Area)}=>{Area}");
        }

        await base.OnInitializedAsync();
    }
}
